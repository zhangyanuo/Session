{"remainingRequest":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/src/views/Lifecycle.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/src/views/Lifecycle.vue","mtime":1620205738812},{"path":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/node_modules/css-loader/dist/cjs.js","mtime":1620116626825},{"path":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1620116628135},{"path":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/node_modules/postcss-loader/src/index.js","mtime":1610434605323},{"path":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/node_modules/cache-loader/dist/cjs.js","mtime":1610697713864},{"path":"/Users/yanuo.zhang/SessionSpace/Session/Vue/vue-session/node_modules/vue-loader/lib/index.js","mtime":1620116628135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxpZmVjeWxlLXdyYXAgewogIHdpZHRoOiA1MDBweDsKfQoubGlmZWN5bGUtd3JhcCBpbWcgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQouYm9yZGVyIHsKICBib3JkZXI6IDFweCBzb2xpZCAjMzMzOwogIHBhZGRpbmc6IDEwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQouYm9yZGVyIGxhYmVsIHsKICBmb250LXNpemU6IDE0cHg7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgZGlzcGxheTogYmxvY2s7CiAgbWFyZ2luOiA1cHggMDsKfQoubWFyZ2luLWJvdHRvbS01IHsKICBtYXJnaW4tYm90dG9tOiA1cHg7Cn0KLmFjdGl2ZSB7CiAgY29sb3I6IGdyZWVuOwp9Cg=="},{"version":3,"sources":["Lifecycle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Lifecycle.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"lifecycle\">\n    <div class=\"lifecyle-wrap\">\n      <img src=\"../assets/lifecycle.png\" alt=\"\" />\n    </div>\n    <div class=\"border\">\n      <b> 1.beforeCreate </b>\n      <p>\n        在这个生命周期之间，进行初始化事件，进行数据的观测，可以看到在created的时候数据已经和data属性进行绑定（放在data中的属性当值发生改变的同时，视图也会改变）。\n        注意看下：此时还是没有el选项\n      </p>\n      <b> 2.created </b>\n      <p>\n        在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测\n        (data observer)，属性和方法的运算，watch/event\n        事件回调。然而，挂载阶段还没开始，$el属性目前不可见。\n      </p>\n      <b> 3.beforeMount </b>\n      <p>\n        在挂载开始之前被调用：相关的render函数首次被调用。\n        不论是created还是beforeMount在它们里面都拿不到真实的dom元素，如果我们需要拿到dom元素就需要在mounted里操作\n      </p>\n      <b> 4.mounted </b>\n      <p>\n        上面的案例mounted可以拿到dom元素，但也只是能拿到初始化数据里的dom元素，如果是存在异步对dom元素数据进行更改我们就只能在updated里获取，应用场景：初始数据（在data中有的）的dom渲染完毕，可以获取dom\n      </p>\n      <b> 5.beforeUpdate </b>\n      <p>\n        当数据更新后出发的钩子函数，这个钩子函数里拿到的是更改之前的数据，虚拟DOM重新渲染和打补丁之前被调用。\n        你可以在这个钩子中进一步地修改data，这不会触发附加的重渲染过程。\n      </p>\n      <b> 6.updated </b>\n      <p>\n        当这个钩子被调用时，组件DOM的data已经更新，所以你现在可以执行依赖于DOM的操作。但是不要在当前钩子里修改当前组件中的data，否则会继续触发beforeUpdate、updated这两个生命周期，进入死循环！\n      </p>\n      <b> 7.beforeDestroy </b>\n      <p>实例销毁之前调用。销毁前,准备销毁, 他这里也是啥都可以访问,往往用来做销毁前的善后处理.</p>\n      <b> 8.destroyed </b>\n      <p>\n        Vue 实例销毁后调用。调用后，Vue\n        实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁.\n      </p>\n    </div>\n    <div class=\"border\">\n      <label for=\"\">input</label>\n      <div>\n        <div id=\"message\">{{destroyedMessage}}</div>\n        <ul>\n          <li v-for=\"(item, index) in items\" :key=\"index\">{{ item }}</li>\n        </ul>\n      </div>\n      <button @click=\"pushArr\">click push</button>\n    </div>\n    <div class=\"border\">\n      <h3 v-if=\"isShow\">{{ SSone }}</h3>\n      <h3 v-else>{{ SStwo }}</h3>\n      <button class=\"btn btn-danger\" type=\"button\" @click=\"destroyVM\">销毁实例</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      isShow: false,\n      SSone: \"one\",\n      SStwo: \"two\",\n      items: [1, 2, 3, 4],\n      message: \"Vue的生命周期\",\n      updatedMessage: \"触发组件更新\",\n      destroyedMessage: \"销毁\",\n    };\n  },\n  computed: {\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.msg.split(\"\").reverse().join(\"\");\n    },\n  },\n  beforeCreate() {\n    console.group(\"------beforeCreate创建前状态------\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el); //undefined\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data); //undefined\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.message);\n  },\n  created() {\n    console.group(\"------created创建完毕状态------\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el); //undefined\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data); //已被初始化\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.message); //已被初始化\n  },\n  beforeMount() {\n    console.group(\"------beforeMount挂载前状态------\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el); //已被初始化\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data); //已被初始化\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.message); //已被初始化\n  },\n  mounted() {\n    // this.intervalID = setInterval(() => {\n    //   // 添加提示\n    //   console.log(\n    //     \"一秒,定时期是全局的，需要注意，放置的位置，需要在beforDestroy的时候销毁 \"\n    //   );\n    //   this.isShow = !this.isShow;\n    // }, 1000);\n    console.group(\"------mounted 挂载结束状态------\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el); //已被初始化\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data); //已被初始化\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.message); //已被初始化\n  },\n  beforeUpdate() {\n    console.group(\"beforeUpdate 更新前状态===============》\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el);\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data);\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.updatedMessage);\n     console.log(\"beforeUpdate\", document.querySelectorAll(\"li\").length);\n  },\n  updated() {\n    console.group(\"updated 更新完成状态===============》\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el);\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data);\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.updatedMessage);\n    console.log(\"Updated\", document.querySelectorAll(\"li\").length);\n  },\n  beforeDestroy() {\n    console.log(\"7beforeDestroy()(被执行)\");\n    // 清除定时器\n    clearInterval(this.intervalID);\n    console.group(\"beforeDestroy 销毁前状态===============》\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el);\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data);\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.destroyedMessage);\n  },\n  destroyed() {\n    console.group(\"destroyed 销毁完成状态===============》\");\n    console.log(\"%c%s\", \"color:red\", \"el     : \" + this.$el);\n    console.log(\"%c%s\", \"color:red\", \"data   : \" + this.$data);\n    console.log(\"%c%s\", \"color:red\", \"message: \" + this.destroyedMessage);\n  },\n  methods: {\n    pushArr() {\n      this.items.push(\"0\");\n    },\n    destroyVM() {\n      this.$destroy();\n    },\n  },\n};\n</script>\n\n<style>\n.lifecyle-wrap {\n  width: 500px;\n}\n.lifecyle-wrap img {\n  width: 100%;\n  height: 100%;\n}\n.border {\n  border: 1px solid #333;\n  padding: 10px;\n  margin-bottom: 10px;\n}\n.border label {\n  font-size: 14px;\n  font-weight: bold;\n  display: block;\n  margin: 5px 0;\n}\n.margin-bottom-5 {\n  margin-bottom: 5px;\n}\n.active {\n  color: green;\n}\n</style>\n"]}]}